1）分支的作用
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的主分支上，这样，既安全，又不影响别人工作。
 
2) 分支的概念
每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：

当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：

从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：

假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：

 
 
 3) 分支的使用
    1. 创建分支: git branch 分支名
        例如：git branch dev

    2.  切换分支: git checkout 分支名
         例如:  git checkout dev

说明：也可以使用 git branch dev -b 一次1和2的两步操作（创建并切换分支）
    3. 查看分支: git branch

说明：*号表标识前正在操作的分支    
    4. 合并分支：git merge 分支名
        例如：git meger dev
        我们先切换到master分之下，然后合并dev分支的内容
 
这样，我们就把dev分支的内容合并到了master分支上
     5. 删除分支：git branch -d 分支名
         例如：git branch -d dev

 
